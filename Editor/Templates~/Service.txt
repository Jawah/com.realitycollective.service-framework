using #NAMESPACE#.Interfaces;
#USING#

namespace #NAMESPACE#
{
    [System.Runtime.InteropServices.Guid("#GUID#")]
    public class #NAME# : #BASE#, #INTERFACE#
    {
        public #NAME#(string name, uint priority, #NAME#Profile profile)
            : base(name, priority)
        {
        }
		
	    // Below are the Unity events that are replicated by the Service Framework, simply delete any that are not required.
        
        /// <inheritdoc />
        public override void Initialize()
        {
            // Initialize is called when the Service Framework first instantiates the service.  (Awake)
        }

        /// <inheritdoc />
        public override void Start()
        {
            // Start is called when the Service Framework receives the "Start" call on loading of the Scene it is attached to.
		    // If "Do No Destroy" is enabled on the Root Service Profile, this is received only once on startup, Else it will occur for each scene loadd with a Service Framework Instance.
        }

        /// <inheritdoc />
        public override void Reset()
        {
            // Whenever the Service Framework is forcibly "Reset" whilst running, each service will also receive the "Reset" call to request they reinitialize.
        }

        /// <inheritdoc />
        public override void Enable()
        {
            // The Unity "Enable" MonoBehaviour event, called when the Service Manager Instance receives the Enable Event.
        }

        /// <inheritdoc />
        public override void Update()
        {
            // The Unity "Update" MonoBehaviour, called when the Service Manager Instance receives the Update Event.
        }

        /// <inheritdoc />
        public override void LateUpdate()
        {
            // The Unity "LateUpdate" MonoBehaviour, called when the Service Manager Instance receives the LateUpdate Event.
        }

        /// <inheritdoc />
        public override void FixedUpdate()
        {
            // The Unity "FixedUpdate" MonoBehaviour, called when the Service Manager Instance receives the FixedUpdate Event.
        }

        /// <inheritdoc />
        public override void Disable()
        {
            // The Unity "Disable" MonoBehaviour, called when the Service Manager Instance receives the Disable Event.
        }

        /// <inheritdoc />
        public override void Destroy()
        {
            // The Unity "Destroy" MonoBehaviour, called when the Service Manager Instance receives the Destroy Event.
        }

        /// <inheritdoc />
        public override void OnApplicationFocus(bool isFocused)
        {
            // The Unity "OnApplicationFocus" MonoBehaviour, called when Unity generates the OnFocus event on App start or resume.
        }

        /// <inheritdoc />
        public override void OnApplicationPause(bool isPaused)
        {
            // The Unity "OnApplicationPause" MonoBehaviour, called when Unity generates the OnPause event on App pauses or is about to suspend.
        }        
    }
}
